shape token
{
    Text: str
}

typealias ast = ImmediateAST

val append : forall 'a. (list['a], 'a) -> list['a]
val extend : forall 'a. (list['a], list['a]) -> list['a]
val empty : forall 'a. () -> list['a]
val resolve_binop : (list[object]) -> ImmediateAST
val to_obj : forall 'a. ('a) -> object
val unesc : (str) -> str
val null : forall 'a. 'a
val mkOGet: (token, ast, ast) -> ast
val mkVal: (token, DObj) -> ast
val mkApp: (token, ast, list[ast]) -> ast
val mkList: (token, list[ast]) -> ast
val mkTuple: (token, list[ast], bool) -> ast
val mkDict: (token, list[(ast, ast)]) -> ast
val mkSet: (token, list[ast]) -> ast
val mkVar: (token, str) -> ast
val mkDecl: (token, list[str]) -> ast
val mkInv: (token, ast) -> ast
val mkNeg: (token, ast) -> ast
val mkNot: (token, ast) -> ast
val mkAnd: (token, ast, ast) -> ast
val mkOr: (token, ast, ast) -> ast
val mkIfThen: (token, ast, ast) -> ast
val mkStoreMany: (list[(ast, str)], ast) -> ast
val mkNestedIf: (token, list[(ast, ast)], ast) -> ast
val mkPipeline: (list[ast]) -> ast
val mkFunc: (token, str, list[str], list[ast]) -> ast
val mkLoop: (token, ast) -> ast
val mkFor: (token, str, ast, ast) -> ast
val mkWhile: (token, ast, ast) -> ast
val mkBlock: (token, list[ast]) -> ast
val mkContinue: (token) -> ast
val mkBreak: (token) -> ast
val mkReturn: (token, ast) -> ast
val mkSymbol: (token, str) -> ast
val mkint: (str, int) -> DObj
val mkfloat: (str) -> DObj
val mkstr: (str) -> DObj
val mknone: () -> DObj
val mkop: (token, str) -> object
val true: bool
val false: bool

start   : optional[newline] nullable[seplist[newline, stmt]] optional[newline] <EOF>
          { $2 }

list[e] : e  { [$1] }
        | list[e] e  { append($1, $2) }


seplist[sep, e]:
      e { [$1] }
    | seplist[sep, e] sep e  { append($1, $3) }

line_wrap[e] : optional[newline] e optional[newline] { $2 }


// comsume all newlines inside the quote
_closelist[sep, e]:
      _closelist[sep, e] newline { $1 }
    | _closelist[sep, e] sep newline e
        { append($1, $4) }
    | _closelist[sep, e] sep e
        { append($1, $3) }
    | e { [$1] }
    |   { [] }

closelist[sep, e]: optional[newline] _closelist[sep, e] { $2 }


nullable[seq] : seq { $1 }
              | { empty() }

optional[a] : a { $1 }
            |   { null }

lhs_seq : lhs_seq lhs optional[ibinop] "=" { append($1, ($2, $3))  }
        | lhs optional[ibinop] "=" { [($1, $2)]  }
        | lhs2 "=" { [($1, null)] }
        | lhs_seq lhs2 "=" { append($1, ($2, null))  }

elifBlock : expr blockOf[then] { ($1, $2) }

snd[a, b] : a b { $2 }

name : <NAME> { $1.Text }
stmt :
    "var" seplist[",", name] { mkDecl($1, $2) }
    | lhs_seq expr { mkStoreMany($1, $2)  }
    | "loop" block "end"
        { mkLoop($1, mkBlock($1, $2))  }
    | "while" expr blockOf[do] "end"
        { mkWhile($1, $2, $3) }
    | "for" <NAME> "in" expr blockOf[do] "end"
        { mkFor($1, $2.Text, $4, $5) }
    | expr            { $1 }


or_[a, b] : a  { 0 }
          | b  { 0 }

then: optional[newline] "then" { $2 }
do: optional[newline] "do" { $2 }

lhs : <NAME>  { mkVar($1, $1.Text) }
    | atom "." "[" expr "]"
        { mkOGet($2, $1, $4) }
    | atom "." <NAME>
        { mkOGet($2, $1, mkVal($3, mkstr($3.Text))) }

or[a, b] : a { $1 }
         | b { $1 }

lhs2 : "(" closelist[",", or[lhs3, lhs2]] trailer ")" { mkTuple($1, $2, $3) }
     | "var" <NAME> { mkDecl($1, [$2.Text]) }

lhs3 : <NAME>  { mkVar($1, $1.Text) }

block : filter[stmt, or_[";", newline]] { $1 }

filter[keep, discard] :
    filter[keep, discard] keep { append($1, $2) }
    | filter[keep, discard] discard { $1 }
    | keep { append(empty(), $1) }
    | discard { empty() }


expr : or_expr { $1 }

or_expr : or_expr  line_wrap["or"] and_expr
            { mkOr($2, $1, $3)  }
         | and_expr { $1 }

and_expr : and_expr line_wrap["and"] not
            { mkAnd($2, $1, $3)  }
         | not { $1 }

not : line_wrap["not"] not { mkNot($1, $2) }
    | bin       { $1 }



binop : <SINGLE_BINOP> { mkop($1, $1.Text) }
      | "not" "in"     { mkop($1, "notin") }
      | "in"           { mkop($1, "in") }
      | "-"            { mkop($1, "-") }

ibinop : <SINGLE_BINOP>  { $1.Text }
       | "-"             { "-" }

binseq  : atom    { append(empty(), to_obj($1)) }
        | binseq binop atom   {
           append($1, $2);
           append($1, to_obj($3)) }

bin : binseq { resolve_binop($1) }

trailer : "," { true }
        |     { false }

blockOf[a] : a block { mkBlock($1, $2) }

pair : expr line_wrap[":"] expr  { ($1, $3) }
atom : atom "." "[" expr "]"  { mkOGet($2, $1, $4) }
     | atom "." <NAME>        { mkOGet($2, $1, mkVal($3, mkstr($3.Text))) }
     | ":" <NAME>             { mkSymbol($2, $2.Text) }
     | ":" <STR>              { mkSymbol($2, unesc($2.Text)) }
     | atom "(" closelist[",", expr] ")" { mkApp($2, $1, $3) }
     | "[" closelist[",", expr] "]" { mkList($1, $2) }
     | "(" closelist[",", expr] trailer ")" { mkTuple($1, $2, $3) }
     | "{" closelist[",", pair] trailer "}" { mkDict($1, $2) }
     | "{" closelist[",", expr] "}" { mkSet($1, $2) }
     | <STR> { mkVal($1, mkstr(unesc($1.Text))) }
     | <INT> { mkVal($1, mkint($1.Text, 0)) }
     | <HEX> { mkVal($1, mkint($1.Text, 16)) }
     | <OCT> { mkVal($1, mkint($1.Text, 8)) }
     | <BIN> { mkVal($1, mkint($1.Text, 2)) }
     | <FLOAT> { mkVal($1, mkfloat($1.Text)) }
     | "None"  { mkVal($1, mknone()) }
     | <NAME>  { mkVar($1, $1.Text) }
     | "-" atom  { mkNeg($1, $2) }
     | "~" atom  { mkInv($1, $2) }
     | "if" expr then block "end"
        { mkIfThen($1, $2, mkBlock($3, $4)) }
     | "if" expr then block
        nullable[list[snd["elif", elifBlock]]]
        optional[blockOf["else"]]
       "end"
        {
            let elif = ($2, mkBlock($3, $4)) in
            let elifs = append(empty(), elif) in
            let elifs = extend(elifs, $5) in
            mkNestedIf($1, elifs, $6)
        }
      | "fun" name "("  nullable[seplist[",", name]] ")"
            block
        "end" { mkFunc($1, $2, $4, $6) }
      | "fun" "("  nullable[seplist[",", name]] ")"
            block
        "end" { mkFunc($1, "", $3, $5) }
      | "("  nullable[seplist[",", name]] ")" "->" line_wrap[expr]
         { mkFunc($1, "", $2, [$5]) }
      | <NAME> "->" line_wrap[expr]
         { mkFunc($1, "", [$1.Text], [$3]) }
        | "break"         { mkBreak($1) }
        | "continue"      { mkContinue($1) }
        | "return" expr   { mkReturn($1, $2) }
        | "return"        { mkReturn($1, null) }


newline : <NEWLINE> { $1 }
        | newline <NEWLINE> { $2 }

%ignore <COMMENT>, <WS_INLINE>

<COMMENT> : "#" (!("\n"| "\r"))*
<SINGLE_BINOP> : ("<" | ">" |">=" | "<=" | "==" | "!=" | "+" | "*" |                 "**" | "/" | "//" | "%" |  "&" | "|" | "<<" | ">>")
<ESCAPED_QUOTE> : "\\\""
<STR> :   "\"" ( ESCAPED_QUOTE | !"\"")* "\""
<WS> : ("\r" | "\t" | "\n" | " ")

<INT> : (DIGIT+ | HEX | OCT | BIN)
<HEX>: "0x" ([0-9] | [a-f])*
<OCT>: "0o" [0-7]*
<BIN>: "0b" [0-1]*

<DIGIT> : [0-9]
<FLOAT> : INT "." INT
<UCODE> : [a-z] | [A-Z] | "_" | [\u4e00-\u9fa5] | "\u2606"
<NAME>  : UCODE (DIGIT | UCODE)*
<WS_INLINE>: (" " | "\t")+
<CR> : "\r"
<LF> : "\n"
<NEWLINE>: (CR? LF)+ (WS_INLINE | (CR? LF))*