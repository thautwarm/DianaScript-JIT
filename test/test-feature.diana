print = log
fun assert_and_print(test, msg)
     a = assert(test, msg)
    assert(a == None)
    print("passed: ", msg)
end

log({1: 2, "3": 4})
log({1: 2, (1, 2): 3})

c = (1, 2)
d = {1: 2, c: 3}

log(d.[1])

log(d.[c])

log(d.[(1,2)])


if 5 in d then
    log("有病吧?(failed)")
else
    log("我似楞啊?(success)")
end


if 5 not in {1: 2, "5": []} then
    log("正确的")
elif 2 ** 4 in [17] then
    log("错误的")
end

z = if 10 in {1: 2, "5": []} then
    log("错误的")
elif 2 ** 4 in [17] then
    log("错误的")
end

if (z == None) then
    log("正确的")
else
    log("错误的")
end



k = {1 : 2}
z = [None]
Dict.search(k, 1, z)
log(z)

z = [None]
log(Dict.search(k, 10, z))
log(z)

assert(z == [None])
assert(not isdefined("_"))


log({"a" : 5 })

log(Num.of("1.2"))
log(typeof(Num.of(12)) == "Num")

log(Int.of(1.2))


var x

x = 2

log(x)


{:a: 2}

☆ = 1

assert(☆ == 1)


☆☆ = 2
assert(☆☆ != 1)

log(1
and 2, "'and' operator line continuation")

log(1
or 2, "'or' operator line continuation")


fun test_cell(x)
    fun set(v)
        x = v
    end

    fun get()
        x
    end
    (set, get)
end

gs = test_cell(1)
gset = gs.[0]
gget = gs.[1]

assert_and_print(gget() == 1, "test cell: get 1")
gset(2)
assert_and_print(gget() == 2, "test cell: get 2")
gset(3)
assert_and_print(gget() == 3, "test cell: get 3")


builder = {
    "start": fun ()
        log("started!")
     end,
     "do_": (self, x) -> log("do" + Str.of(x)),
    "finish": (self) -> log("finished!")
}

builder {
    do_ 1
    do_ 2
    do_ 3
}

builder = {
    "start": fun()
         x  = {}
        return x
    end,
    "yield": (self, x) -> log("yield " + Str.of(x)),
    "finish": (self) -> (),
    "reason": (self) -> log("reason!")
}



builder as bb {
    reason
    yield 1
    yield bb
}

(a, b, (c, d, (e, ))) = (1, 2, (3, 4, (5, )))

assert_and_print(a == 1 and b == 2 and c == 3 and d == 4 and e == 5, "global_unpack")

var x = 1

fun ()
    var a, b, c, d, e
    (a, b, (c, d, (e, ))) = (1, 2, (3, 4, (5, )))
    assert_and_print(a == 1 and b == 2 and c == 3 and d == 4 and e == 5, "local_unpack")
end()


uuuuuu = "a"

fun ()
    var uuuuuu  = "b"
end

assert_and_print(uuuuuu == "a", "not polluted")